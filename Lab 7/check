#!/usr/bin/env python3
# =============================================================================
# =========================== ENVIRONMENT VARIABLES ===========================
# =============================================================================
LAB_NB = 7

REQUIRED_FILES = [
    "ex7q1.c",
]

Q1_INPUT_1 = """\
2
123 G
91312 B
9999 P
0 0
0 1
"""

Q1_INPUT_2 = """\
20
0 0
795083255 s
990050615 5
718986123 1
39742171 O
126657912 _
468132353 q
844455765 c
701743244 M
243972890 ,
0 10
0 13
0 15
232040209 5
0 17
516936088 (
472120246 %
0 17
336483072 U
97516161 t
0 8
"""

Q1_OUTPUT_1 = """\
B
GP
"""

Q1_OUTPUT_2 = """\

,
q
s5


(
"""

# =============================================================================
# ================================= FUNCTIONS =================================
# =============================================================================
import argparse
import difflib
import os
import re
import tarfile
import tempfile
import shlex
import subprocess
from pathlib import Path
from subprocess import Popen, PIPE, DEVNULL

IS_PASSED_CHECK = [True]  # List to avoid global keyword

def is_valid_host():
    """Checks to make sure we're running on a 201 lab machine"""
    hostname = subprocess.run("hostname", capture_output=True)

    if hostname.returncode != 0:
        print("Unexpected error when looking for hostname")
        return False

    hostname = hostname.stdout.decode(encoding="UTF-8").strip()

    return re.fullmatch("ug[0-9]{2}", hostname) or (hostname in ["ohaton", "coronation", "innisfree"])

def take_diff(s1, s2, n1, n2):
    diffed = list(difflib.unified_diff(s1.split('\n'), s2.split('\n'), fromfile=n1, tofile=n2, lineterm='\n'))
    diffed = "\n".join(diffed)
    return diffed


def gen_diff_with(student_out, our_out, name):
    s = f">>>> Diff for {name} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n"
    s += take_diff(
        our_out,
        student_out,
        "Solution's output",
        "Student's output",
    )
    s += f"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
    return s


def check_required_files(d):
    for f in REQUIRED_FILES:
        p = Path(f"{d}/{f}")

        if not p.is_file():
            print(f"File {f} missing from submission")
            IS_PASSED_CHECK[0] = False


def compile(l, o):
    s = ""
    for x in l:
        s += f"{x} "

    return (
        subprocess.run(shlex.split(f"gcc -Werror -Wall -std=c99 {s} -o {o}")).returncode
        == 0
    )


def run_test_1(executable, in_str, out_str, returncode, name):
    ex = Popen(executable, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)

    try:
        ex_stdout, errs = ex.communicate(in_str.encode("utf-8"), timeout=1)
        ex_stdout = ex_stdout.decode("utf-8")
    except subprocess.TimeoutExpired:
        print(
            f"{name} froze while running... it was killed. Make sure your program exits"
        )
        IS_PASSED_CHECK[0] = False
        return

    diff = gen_diff_with(ex_stdout, out_str, name)

    if ex.returncode != returncode:
        print(f"{name} failed to return code {returncode} when expected")
        IS_PASSED_CHECK[0] = False
    elif ex_stdout != out_str:
        print(diff)
        IS_PASSED_CHECK[0] = False

# =============================================================================
# =================================== MAIN ====================================
# =============================================================================
parser = argparse.ArgumentParser(
    prog=f"check",
    description=f"Check the core essentials for lab {LAB_NB}. Get 50% if you pass!",
)

parser.add_argument(
    "submission_tar",
    type=Path,
    metavar="<TAR>",
    help=f"Path to your submit.tar for lab {LAB_NB}",
)

args = parser.parse_args()


# Make sure it's the lab machine ====
if not is_valid_host():
    print(
        "This script must be run on the undergraduate lab machines, ug01 through ug34"
    )
    IS_PASSED_CHECK[0] = False

# Open tar ====
with tempfile.TemporaryDirectory() as tmpdir:
    try:
        with tarfile.open(args.submission_tar, "r") as f:
            f.extractall(path=tmpdir)
    except tarfile.ReadError:
        print(f"Provided path `{args.submission_tar}` is not a readable tar file")
        exit(1)

    check_required_files(tmpdir)

    if not compile([f"{tmpdir}/ex7q1.c"], f"{tmpdir}/ex7q1.out"):
        print(f"Failed to compile ex7q1.c!")
        exit(1)

    run_test_1(f"{tmpdir}/ex7q1.out", Q1_INPUT_1, Q1_OUTPUT_1, 0, "ex7q1.c case 1")
    run_test_1(f"{tmpdir}/ex7q1.out", Q1_INPUT_2, Q1_OUTPUT_2, 0, "ex7q1.c case 2")


if IS_PASSED_CHECK[0]:
    print("Nice, you passed! You'll get at least 50% for this lab mark.")
else:
    print("Check was not passed. Not passing check often results in failing the lab.")
