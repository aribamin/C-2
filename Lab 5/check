#!/usr/bin/env python3
# =============================================================================
# =========================== ENVIRONMENT VARIABLES ===========================
# =============================================================================
LAB_NB = 5

REQUIRED_FILES = [
    "ex5q1.c",
    "ex5q2.c",
    "lab05b.o",
    "lab05.h",
]

Q1_INPUT_1 = """\
845 632 179
732 918 654
196 745 328

683 574 912
457 291 836
219 863 547

361 429 785
574 186 293
928 357 461
"""

Q1_OUTPUT_1 = """\
Valid
"""

Q1_INPUT_2 = """\
141 333 179
332 338 354
336 335 338

383 373 913
353 393 333
319 363 343

333 433 733
573 133 233
928 333 363
"""

Q1_OUTPUT_2 = """\
Invalid
"""

Q2_INPUT_1 = """\
3
0 7 6
0 0 0
4 0 0
"""

Q2_OUTPUT_1 = """\
2 7 6
9 5 1
4 3 8
"""

Q2_INPUT_2 = """\
4
0 7 6 20
9 2 0 11
4 0 0 1
1 1 1 0
"""

Q2_OUTPUT_2 = """\
Invalid
"""

# =============================================================================
# ================================= FUNCTIONS =================================
# =============================================================================
import argparse
import os
import re
import tarfile
import tempfile
import shlex
import subprocess
from pathlib import Path
from subprocess import Popen, PIPE, DEVNULL


def is_valid_host():
    """Checks to make sure we're running on a 201 lab machine"""
    hostname = subprocess.run("hostname", capture_output=True)

    if hostname.returncode != 0:
        print("Unexpected error when looking for hostname")
        return False

    hostname = hostname.stdout.decode(encoding="UTF-8").strip()

    return re.fullmatch("ug[0-9]{2}", hostname) or "ohaton" == hostname


def check_required_files(d):
    for f in REQUIRED_FILES:
        p = Path(f"{d}/{f}")

        if not p.is_file():
            print(f"File {f} missing from submission")
            exit(1)


def compile(c, o):
    return (
        subprocess.run(shlex.split(f"gcc -Werror -Wall -std=c99 {c} -o {o}")).returncode
        == 0
    )


def compile_all_files(d):
    for i in range(1, 3):
        if not compile(
            f"{tmpdir}/ex{LAB_NB}q{i}.c", f"{tmpdir}/ex{LAB_NB}q{i}.out"
        ):
            print(f"Failed to compile ex{LAB_NB}q{i}.c!")
            exit(1)


def run_test(executable, in_str, out_str, returncode, name):
    ex = Popen(executable, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)

    try:
        ex_stdout, errs = ex.communicate(in_str.encode("utf-8"), timeout=1)
        ex_stdout = ex_stdout.decode("utf-8")
    except subprocess.TimeoutExpired:
        print(
            f"{name} froze while running... it was killed. Make sure your program exits"
        )
        exit(1)

    if ex.returncode != returncode:
        print(f"{name} failed to return code {returncode} when expected")
        exit(1)
    elif ex_stdout != out_str:
        print(f"Output for {name} doesn't match expected output")
        print(
            "Consider going back to the lab description and making sure your output matches the examples exactly"
        )
        exit(1)


# =============================================================================
# =================================== MAIN ====================================
# =============================================================================
parser = argparse.ArgumentParser(
    prog=f"check",
    description=f"Check the core essentials for lab {LAB_NB}. Get 50% if you pass!",
)

parser.add_argument(
    "submission_tar",
    type=Path,
    metavar="<TAR>",
    help=f"Path to your submit.tar for lab {LAB_NB}",
)

args = parser.parse_args()


# Make sure it's the lab machine ====
if not is_valid_host():
    print(
        "This script must be run on the undergraduate lab machines, ug01 through ug34"
    )
    exit(1)

# Open tar ====
with tempfile.TemporaryDirectory() as tmpdir:
    try:
        with tarfile.open(args.submission_tar, "r") as f:
            f.extractall(path=tmpdir)
    except tarfile.ReadError:
        print(f"Provided path `{args.submission_tar}` is not a readable tar file")
        exit(1)

    check_required_files(tmpdir)

    if not compile(f"{tmpdir}/ex5q1.c", f"{tmpdir}/ex5q1.out"):
        print(f"Failed to compile ex5q1.c!")
        exit(1)

    gcc = subprocess.run(shlex.split(f"gcc -Werror -Wall -std=c99 {tmpdir}/ex5q2.c {tmpdir}/lab05b.o -o {tmpdir}/ex5q2.out"))

    if gcc.returncode != 0:
        print(f"Failed to compile ex5q1.c!")
        exit(1)

    # This one needs more complex checking
    run_test(f"{tmpdir}/ex5q1.out", Q1_INPUT_1, Q1_OUTPUT_1, 0, "ex5q1.c")
    run_test(f"{tmpdir}/ex5q1.out", Q1_INPUT_2, Q1_OUTPUT_2, 0, "ex5q1.c")

    run_test(f"{tmpdir}/ex5q2.out", Q2_INPUT_1, Q2_OUTPUT_1, 0, "ex5q2.c")
    run_test(f"{tmpdir}/ex5q2.out", Q2_INPUT_2, Q2_OUTPUT_2, 0, "ex5q2.c")

print("Nice, you passed! You'll get at least 50% for this lab mark.")
