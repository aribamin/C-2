#!/usr/bin/env python3
# =============================================================================
# =========================== ENVIRONMENT VARIABLES ===========================
# =============================================================================
LAB_NB = 3
REQUIRED_FILES = [
    "ex3q1.c",
    "ex3q2.c",
]

Q1_INPUT = "\n".join("r" for _ in range(10000))

Q1_OUTPUT = False  # Needs a more complicated check step

Q2_INPUT = """\
45 70 10 53 32 11 8 2 -7 10 11 53 2 4 0 -20 31 25 91 63 1 -1
"""

Q2_OUTPUT = """\
Enter 22 integers: x * max + y * min: 111
"""

# =============================================================================
# ================================= FUNCTIONS =================================
# =============================================================================
import argparse
import os
import re
import tarfile
import tempfile
import shlex
import subprocess
from pathlib import Path
from subprocess import Popen, PIPE, DEVNULL


def is_valid_host():
    """Checks to make sure we're running on a 201 lab machine"""
    hostname = subprocess.run("hostname", capture_output=True)

    if hostname.returncode != 0:
        print("Unexpected error when looking for hostname")
        return False

    hostname = hostname.stdout.decode(encoding="UTF-8").strip()

    return re.fullmatch("ug[0-9]{2}", hostname) or "ohaton" == hostname


def check_required_files(d):
    for f in REQUIRED_FILES:
        p = Path(f"{d}/{f}")

        if not p.is_file():
            print(f"File {f} missing from submission")
            exit(1)


def compile(c, o):
    return (
        subprocess.run(shlex.split(f"gcc -Werror -Wall -std=c99 {c} -o {o}")).returncode
        == 0
    )


def compile_all_files(d):
    for i in range(1, 3):
        if not compile(
            f"{tmpdir}/ex{LAB_NB}q{i}.c", f"{tmpdir}/ex{LAB_NB}q{i}.out"
        ):
            print(f"Failed to compile ex{LAB_NB}q{i}.c!")
            exit(1)


def run_test(executable, in_str, out_str, returncode, name):
    ex = Popen(executable, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)

    try:
        ex_stdout, errs = ex.communicate(in_str.encode("utf-8"), timeout=1)
        ex_stdout = ex_stdout.decode("utf-8")
    except subprocess.TimeoutExpired:
        print(
            f"{name} froze while running... it was killed. Make sure your program exits"
        )
        exit(1)

    if ex.returncode != returncode:
        print(f"{name} failed to return code {returncode} when expected")
        exit(1)
    elif ex_stdout != out_str:
        print(f"Output for {name} doesn't match expected output")
        print(
            "Consider going back to the lab description and making sure your output matches the examples exactly"
        )
        exit(1)


def run_test_1(executable, in_str, out_str, returncode, name):
    ex = Popen(executable, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)

    try:
        ex_stdout, errs = ex.communicate(in_str.encode("utf-8"), timeout=1)
        ex_stdout = ex_stdout.decode("utf-8")
    except subprocess.TimeoutExpired:
        print(
            f"{name} froze while running... it was killed. Make sure your program exits"
        )
        exit(1)

    if ex.returncode != returncode:
        print(f"{name} failed to return code {returncode} when expected")
        exit(1)

    # Process output line by line with a state machine. Check each line
    RE_TURN = re.compile(
        "Turn [123] player [12]: You rolled: ([1-6]) ([1-6]) ([1-6]) = ([0-9]+) points"
    )
    RE_TURN_WIN = re.compile("Player [12] wins this round with [0-9]+ points")
    RE_TURN_TIE = re.compile("Both players tied this round with [0-9]+ points")
    RE_LIVES = re.compile("Player [12] lives = [0123]")
    RE_GAME_WIN = re.compile("Player [12] wins!")

    class State:
        ROLLING = 1
        TURN_WIN = 2
        LIVES_P1 = 3
        LIVES_P2 = 4
        GAME_WIN = 5

    state = State.ROLLING

    for line in ex_stdout.split("\n"):
        if state == State.ROLLING:
            if RE_TURN.fullmatch(line):
                # The marking file will make sure the points are right and the
                # dice are listed in ascending order
                continue
            elif RE_TURN_WIN.fullmatch(line):
                state = State.TURN_WIN
            elif RE_GAME_WIN.fullmatch(line):
                state = State.GAME_WIN
            else:
                print("Output format of ex3q1.c does not match the example.")
                exit(1)
        elif state == State.TURN_WIN:
            if RE_TURN_TIE.fullmatch(line):
                state = State.LIVES_P2  # Skip to blank line
            elif RE_LIVES.fullmatch(line):
                state = State.LIVES_P1
            else:
                print(
                    "Output format for printing p1's lives does not match the example."
                )
                exit(1)
        elif state == State.LIVES_P1:
            if not RE_LIVES.fullmatch(line):
                print(
                    "Output format for printing p2's lives does not match the example."
                )
                exit(1)
            state = State.LIVES_P2
        elif state == State.LIVES_P2:
            if len(line) != 0:
                print(
                    "Blank line in between turns in ex3q1.c isn't present or isn't blank"
                )
                exit(1)
            state = State.ROLLING
        elif state == State.GAME_WIN:
            if len(line) != 0:
                print(
                    "Something was printed after the game was won in ex3q1.c's output"
                )
                exit(1)


# =============================================================================
# =================================== MAIN ====================================
# =============================================================================
parser = argparse.ArgumentParser(
    prog=f"check",
    description=f"Check the core essentials for lab {LAB_NB}. Get 50% if you pass!",
)

parser.add_argument(
    "submission_tar",
    type=Path,
    metavar="<TAR>",
    help=f"Path to your submit.tar for lab {LAB_NB}",
)

args = parser.parse_args()


# Make sure it's the lab machine ====
if not is_valid_host():
    print(
        "This script must be run on the undergraduate lab machines, ug01 through ug34"
    )
    exit(1)

# Open tar ====
with tempfile.TemporaryDirectory() as tmpdir:
    try:
        with tarfile.open(args.submission_tar, "r") as f:
            f.extractall(path=tmpdir)
    except tarfile.ReadError:
        print(f"Provided path `{args.submission_tar}` is not a readable tar file")
        exit(1)

    check_required_files(tmpdir)
    compile_all_files(tmpdir)

    # This one needs more complex checking
    run_test_1(f"{tmpdir}/ex3q1.out", Q1_INPUT, Q1_OUTPUT, 0, "ex3q1.c")
    run_test(f"{tmpdir}/ex3q2.out", Q2_INPUT, Q2_OUTPUT, 0, "ex3q2.c")

print("Nice, you passed! You'll get at least 50% for this lab mark.")
