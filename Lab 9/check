#!/usr/bin/env python3
# =============================================================================
# =========================== ENVIRONMENT VARIABLES ===========================
# =============================================================================
LAB_NB = 9

REQUIRED_FILES = [
    "ex9q1.c",
    "ex9q2.c",
]

Q1_INPUT_1 = """\
3 2
apple blueberry citrus
apple aple itrus
cus berry
"""

Q1_OUTPUT_1 = """\
apple apple citrus
citrus blueberry
"""

Q1_INPUT_2 = """\
4 3
a b c d
b n e r e r e
i k c k l r d i w b k
e
"""

Q1_OUTPUT_2 = """\
b a a a a a a
a a c a a a d a a b a
a
"""

Q1_INPUT_3 = """\
7 2
szru bios g nlbt yfz pd zeo
ar jiglj xt a oskessp
fes bk sdfobcm juonooo eqxdde giwv qkkbj
"""

Q1_OUTPUT_3 = """\
g bios g g szru
zeo g szru bios pd bios nlbt
"""

Q2_INPUT_1 = """\
3
123 + 10
123 @ 10
123 rot 10
"""

Q2_OUTPUT_1 = """\
133
12310
231
"""

Q2_INPUT_2 = """\
4
12345678901234567890123456789012345678901234567890 rot 1
12345678901234567890123456789012345678901234567890 rot 10
12345678901234567890123456789012345678901234567890 + 12345678901234567890123456789012345678901234567890
12345678901234567890123456789012345678901234567890 @ 12345678901234567890123456789012345678901234567890
"""

Q2_OUTPUT_2 = """\
23456789012345678901234567890123456789012345678901
12345678901234567890123456789012345678901234567890
24691357802469135780246913578024691357802469135780
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
"""

Q2_INPUT_3 = """\
4
0 + 0
10000000000000000000000000000 + 1
0 rot 0
100 rot 1
"""

Q2_OUTPUT_3 = """\
0
10000000000000000000000000001
0
1
"""

# =============================================================================
# ================================= FUNCTIONS =================================
# =============================================================================
import argparse
import difflib
import os
import re
import tarfile
import tempfile
import shlex
import subprocess
from pathlib import Path
from subprocess import Popen, PIPE, DEVNULL

IS_PASSED_CHECK = [True]  # Use list to avoid global keyword


def is_valid_host():
    """Checks to make sure we're running on a 201 lab machine"""
    hostname = subprocess.run("hostname", capture_output=True)

    if hostname.returncode != 0:
        print("Unexpected error when looking for hostname")
        return False

    hostname = hostname.stdout.decode(encoding="UTF-8").strip()

    return re.fullmatch("ug[0-9]{2}", hostname) or (
        hostname in ["ohaton", "coronation", "innisfree"]
    )


def take_diff(s1, s2, n1, n2):
    diffed = list(
        difflib.unified_diff(
            s1.split("\n"), s2.split("\n"), fromfile=n1, tofile=n2, lineterm="\n"
        )
    )
    diffed = "\n".join(diffed)
    return diffed


def gen_diff_with(student_out, our_out, name):
    s = f">>>> Diff for {name} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \n"
    s += take_diff(
        our_out,
        student_out,
        "Solution's output",
        "Student's output",
    )
    s += f"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
    return s


def check_required_files(d):
    for f in REQUIRED_FILES:
        p = Path(f"{d}/{f}")

        if not p.is_file():
            print(f"File {f} missing from submission")
            IS_PASSED_CHECK[0] = False


def compile(l, o):
    s = ""
    for x in l:
        s += f"{x} "

    return (
        subprocess.run(shlex.split(f"gcc -Werror -Wall -std=c99 {s} -o {o}")).returncode
        == 0
    )


def run_test_1(executable, in_str, out_str, returncode, name):
    ex = Popen(executable, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)

    try:
        ex_stdout, errs = ex.communicate(in_str.encode("utf-8"), timeout=10)
        ex_stdout = ex_stdout.decode("utf-8")
    except subprocess.TimeoutExpired:
        print(
            f"{name} froze while running... it was killed. Make sure your program exits"
        )
        IS_PASSED_CHECK[0] = False
        return

    diff = gen_diff_with(ex_stdout, out_str, name)

    if ex.returncode != returncode:
        print(f"{name} failed to return code {returncode} when expected")
        IS_PASSED_CHECK[0] = False
    elif ex_stdout != out_str:
        print(diff)
        IS_PASSED_CHECK[0] = False


# =============================================================================
# =================================== MAIN ====================================
# =============================================================================
parser = argparse.ArgumentParser(
    prog=f"check",
    description=f"Check the core essentials for lab {LAB_NB}. Get 50% if you pass!",
)

parser.add_argument(
    "submission_tar",
    type=Path,
    metavar="<TAR>",
    help=f"Path to your submit.tar for lab {LAB_NB}",
)

args = parser.parse_args()


# Make sure it's the lab machine ====
if not is_valid_host():
    print(
        "This script must be run on the undergraduate lab machines, ug01 through ug34"
    )
    exit(1)

# Open tar ====
with tempfile.TemporaryDirectory() as tmpdir:
    try:
        with tarfile.open(args.submission_tar, "r") as f:
            f.extractall(path=tmpdir)
    except tarfile.ReadError:
        print(f"Provided path `{args.submission_tar}` is not a readable tar file")
        exit(1)

    check_required_files(tmpdir)

    if not compile([f"{tmpdir}/ex9q1.c"], f"{tmpdir}/ex9q1.out"):
        print(f"Failed to compile ex9q2.c!")
    else:
        run_test_1(f"{tmpdir}/ex9q1.out", Q1_INPUT_1, Q1_OUTPUT_1, 0, "ex9q1.c case 1")
        run_test_1(f"{tmpdir}/ex9q1.out", Q1_INPUT_2, Q1_OUTPUT_2, 0, "ex9q1.c case 2")
        run_test_1(f"{tmpdir}/ex9q1.out", Q1_INPUT_3, Q1_OUTPUT_3, 0, "ex9q1.c case 3")

    if not compile([f"{tmpdir}/ex9q2.c"], f"{tmpdir}/ex9q2.out"):
        print(f"Failed to compile ex9q2.c!")
    else:
        run_test_1(f"{tmpdir}/ex9q2.out", Q2_INPUT_1, Q2_OUTPUT_1, 0, "ex9q2.c case 1")
        run_test_1(f"{tmpdir}/ex9q2.out", Q2_INPUT_2, Q2_OUTPUT_2, 0, "ex9q2.c case 2")
        run_test_1(f"{tmpdir}/ex9q2.out", Q2_INPUT_3, Q2_OUTPUT_3, 0, "ex9q2.c case 3")

if IS_PASSED_CHECK[0]:
    print("Nice, you passed! You'll get at least 50% for this lab mark.")
    print("This script did NOT check for memory leaks. You need to check that yourself")
else:
    print("Check was not passed. Not passing check often results in failing the lab.")
    print("This script did NOT check for memory leaks. You need to check that yourself")
